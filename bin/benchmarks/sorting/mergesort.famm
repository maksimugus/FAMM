func merge(arr: [int, 1000], left: int, mid: int, right: int): [int, 1000] = {
    var n1: int = mid - left + 1;
    var n2: int = right - mid;

    var leftArray: [int, 1000];
    var rightArray: [int, 1000];

    for (var i: int = 0 -> n1 by 1) {
        leftArray[i] = arr[left + i];
    };

    for (var j: int = 0 -> n2 by 1) {
        rightArray[j] = arr[mid + 1 + j];
    };

    i = 0;
    j = 0;
    var k: int = left;

    while (i < n1 and j < n2) {
        if (leftArray[i] <= rightArray[j]) {
            arr[k] = leftArray[i];
            i = i + 1;
        } else {
            arr[k] = rightArray[j];
            j = j + 1;
        };
        k = k + 1;
    };

    while (i < n1) {
        arr[k] = leftArray[i];
        i = i + 1;
        k = k + 1;
    };

    while (j < n2) {
        arr[k] = rightArray[j];
        j = j + 1;
        k = k + 1;
    };

    return arr;
};

func mergeSortHelper(arr: [int, 1000], left: int, right: int): [int, 1000] = {
    if (left < right) {
        var mid: int = (left + right) // 2;

        arr = mergeSortHelper(arr, left, mid);
        arr = mergeSortHelper(arr, mid + 1, right);

        arr = merge(arr, left, mid, right);
    };
    return arr;
};

func mergeSort(arr: [int, 1000]): [int, 1000] = {
    return mergeSortHelper(arr, 0, 1000 - 1);
};

var array: [int, 1000];

for (var k: int = 0 -> 1000 by 1) {
    array[k] = 1000 - k;
};

array = mergeSort(array);

for (var i: int = 0 -> 1000 by 1) {
    display(array[i]);
};
